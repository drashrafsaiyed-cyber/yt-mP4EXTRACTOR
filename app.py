from fastapi import FastAPI, HTTPException, Request
	•	from fastapi.responses import StreamingResponse
	•	import os, tempfile, subprocess, glob
	•	app = FastAPI(title=“yt-dlp microservice”)
	•	def authorized(req: Request) -> bool: token = os.getenv(“API_TOKEN”, “”) if not token: return True return req.headers.get(“authorization”, “”) == f”Bearer {token}”
	•	def pick_format(short: bool) -> str: return “bestext=mp4height<=720” if short else “bestvideoext=mp4height<=1080+bestaudioext=m4a/bestext=mp4”
	•	@app.get(”/health”) async def health(): return {“status”: “ok”}
	•	@app.post(”/download”) async def download(req: Request): if not authorized(req): raise HTTPException(status_code=401, detail=“Unauthorized”) try: body = await req.json() except Exception: raise HTTPException(status_code=400, detail=“Invalid JSON”) url = body.get(“url”) short = bool(body.get(“short”, True)) if not url: raise HTTPException(status_code=400, detail=“url required”) with tempfile.TemporaryDirectory() as td: out_tmpl = os.path.join(td, “out.%(ext)s”) fmt = pick_format(short) cmd = “yt-dlp”,”-f”,fmt,”–no-playlist”,”–restrict-filenames”,”–merge-output-format”,“mp4”,”-o”,out_tmpl,url try: subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, timeout=600) except subprocess.TimeoutExpired: raise HTTPException(status_code=504, detail=“Timeout”) except subprocess.CalledProcessError as e: err = (e.stderr or “”)-1200: raise HTTPException(status_code=502, detail=f”yt-dlp error: {err}”) files = glob.glob(os.path.join(td, “out.*”)) if not files: raise HTTPException(status_code=500, detail=“No output”) path = files def stream(): with open(path, “rb”) as f: while True: chunk = f.read(1024 * 1024) if not chunk: break yield chunk headers = {“Content-Disposition”: “attachment; filename=video.mp4”} return StreamingResponse(stream(), media_type=“video/mp4”, headers=headers)
